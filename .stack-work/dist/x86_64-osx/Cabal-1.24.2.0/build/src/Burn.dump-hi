
==================== FINAL INTERFACE ====================
2017-08-08 15:02:58.525378 UTC

interface Burn-0.1.0.0-7IS4CBqHvFj2pncH325bfV:Burn 8002
  interface hash: 891f3d163969cc5e3393c48492d77823
  ABI hash: 24a6106a2c2049b841f6d8b1341355e2
  export-list hash: 7389be0bd251803f40fee03363b218e9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  Burn.avg
  Burn.exportImg
  Burn.exportImg'
  Burn.f
  Burn.g
  Burn.h
  Burn.i
  Burn.initImg
  Burn.initImg'
  Burn.initRndImg
  Burn.initRndImg'
  Burn.j
  Burn.k
  Burn.k'
  Burn.l
  Burn.l'
  Burn.l''
  Burn.m
  Burn.mkNoise
  Burn.mkRndNoise
  Burn.rnd
  Burn.toPGM
  Burn.Blue
  Burn.Color
  Burn.Green
  Burn.Img
  Burn.Pixel
  Burn.Red
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog*
                      time-1.6.0.1@time-1.6.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.IO eb504c57b397cf133849f8586f15dafb
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog:System.Random cc3ef358c669b194cf9fe94db6f2430f
ab929a6d1ff9904adf7982d6ef2a56b6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Burn.$trModule2 Burn.$trModule1) -}
712a259c57cbd8649bd5cebe3a9a0beb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Burn"#) -}
945e51d5ab24f3fe85190ad046d4bd9f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Burn-0.1.0.0-7IS4CBqHvFj2pncH325bfV"#) -}
51c9521db8de889ca5d4b7bf4d482ac9
  $wavg :: [GHC.Types.Int] -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Int]) ->
                 case Burn.$wgo w 0# of ww { DEFAULT ->
                 case GHC.List.$wlenAcc @ GHC.Types.Int w 0# of ww2 { DEFAULT ->
                 case GHC.Prim./##
                        (GHC.Prim.int2Double# ww)
                        (GHC.Prim.int2Double# ww2) of wild2 { DEFAULT ->
                 case {__pkg_ccall base-4.9.1.0 rintDouble GHC.Prim.Double#
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 GHC.Prim.Double# #)}
                        wild2
                        GHC.Prim.realWorld# of wild { (#,#) ds2 ds3 ->
                 GHC.Prim.double2Int# ds3 } } } }) -}
ed167def72dbd875b3e7ca3308479ec1
  $wf :: [GHC.Types.Int] -> (# [GHC.Types.Int], [[GHC.Types.Int]] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Int]) ->
                 (# GHC.Types.:
                      @ GHC.Types.Int
                      (case Burn.$wavg
                              (GHC.Types.:
                                 @ GHC.Types.Int
                                 (GHC.List.last @ GHC.Types.Int w)
                                 (GHC.List.$wunsafeTake @ GHC.Types.Int 2# w)) of ww { DEFAULT ->
                       GHC.Types.I# ww })
                      (case Burn.f_go w of wild {
                         [] -> case GHC.List.init2 ret_ty [GHC.Types.Int] of {}
                         : x xs
                         -> case GHC.List.init1 @ GHC.Types.Int x xs of wild1 {
                              [] -> case GHC.List.init2 ret_ty [GHC.Types.Int] of {}
                              : x1 xs1
                              -> GHC.Base.++
                                   @ GHC.Types.Int
                                   (GHC.List.init1 @ GHC.Types.Int x1 xs1)
                                   (GHC.Types.:
                                      @ GHC.Types.Int
                                      (case Burn.$wavg
                                              (GHC.Types.:
                                                 @ GHC.Types.Int
                                                 (case w of wild2 {
                                                    [] -> GHC.List.badHead @ GHC.Types.Int
                                                    : x2 ds1 -> x2 })
                                                 (GHC.List.$wunsafeTake
                                                    @ GHC.Types.Int
                                                    2#
                                                    (GHC.List.reverse1
                                                       @ GHC.Types.Int
                                                       w
                                                       (GHC.Types.[]
                                                          @ GHC.Types.Int)))) of ww { DEFAULT ->
                                       GHC.Types.I# ww })
                                      (GHC.Types.[] @ GHC.Types.Int)) } }),
                    GHC.Types.:
                      @ [GHC.Types.Int]
                      w
                      (GHC.Types.[] @ [GHC.Types.Int]) #)) -}
f2b469f8451587f783f761bf6443fad4
  $wgo :: [GHC.Types.Int] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
9c920ed3a998d9aed5a4fe2a79dd083d
  $wgo1 :: [GHC.Types.Int] -> [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
28813a12fbae3e67a40b6cda0ee71a37
  $wgo2 :: System.Random.StdGen -> GHC.Prim.Int# -> [GHC.Types.Int]
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
de20733340044c14e34500663f9b123d
  $wgo3 :: System.Random.StdGen -> GHC.Prim.Int# -> [GHC.Types.Int]
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
ca3838f4d1852c46aee017f80cc0f6f9
  $wgo4 :: System.Random.StdGen -> GHC.Prim.Int# -> [GHC.Types.Int]
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
94fdc584b42eff3741b66fc7351b51b8
  $wh ::
    ([GHC.Types.Int], [GHC.Types.Int])
    -> (# GHC.Types.Int, [GHC.Types.Int] #)
  {- Arity: 1, Strictness: <L,U(U,U)>, Inline: [0],
     Unfolding: (\ (w :: ([GHC.Types.Int], [GHC.Types.Int])) ->
                 (# case Burn.$wavg
                           (GHC.Types.:
                              @ GHC.Types.Int
                              (case w of wild { (,) ds1 y -> GHC.List.head @ GHC.Types.Int y })
                              (GHC.Types.:
                                 @ GHC.Types.Int
                                 (case w of wild { (,) x ds1 ->
                                  Burn.h_go1 x (GHC.List.lastError @ GHC.Types.Int) })
                                 (case w of wild { (,) x ds1 ->
                                  GHC.List.$wunsafeTake @ GHC.Types.Int 2# x }))) of ww { DEFAULT ->
                    GHC.Types.I# ww },
                    case w of ww { (,) ww1 ww2 ->
                    case Burn.$wgo1 ww1 ww2 of wild {
                      [] -> case GHC.List.init2 ret_ty [GHC.Types.Int] of {}
                      : x xs
                      -> GHC.Base.++
                           @ GHC.Types.Int
                           (GHC.List.init1 @ GHC.Types.Int x xs)
                           (GHC.Types.:
                              @ GHC.Types.Int
                              (case Burn.$wavg
                                      (GHC.Types.:
                                         @ GHC.Types.Int
                                         (Burn.h_go ww2 (GHC.List.lastError @ GHC.Types.Int))
                                         (GHC.Types.:
                                            @ GHC.Types.Int
                                            (case ww1 of wild1 {
                                               [] -> GHC.List.badHead @ GHC.Types.Int
                                               : x1 ds1 -> x1 })
                                            (GHC.List.$wunsafeTake
                                               @ GHC.Types.Int
                                               2#
                                               (GHC.List.reverse1
                                                  @ GHC.Types.Int
                                                  ww1
                                                  (GHC.Types.[]
                                                     @ GHC.Types.Int))))) of ww3 { DEFAULT ->
                               GHC.Types.I# ww3 })
                              (GHC.Types.[] @ GHC.Types.Int)) } } #)) -}
667448cae3aafa37d1277c3176454ce1
  $wi ::
    [GHC.Types.Int]
    -> [GHC.Types.Int]
    -> GHC.Base.Maybe
         (GHC.Types.Int, ([GHC.Types.Int], [GHC.Types.Int]))
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Types.Int]) (ww1 :: [GHC.Types.Int]) ->
                 case ww1 of wild {
                   [] -> Burn.i1
                   : ds ds1
                   -> case ds1 of wild1 {
                        []
                        -> GHC.Base.Nothing
                             @ (GHC.Types.Int, ([GHC.Types.Int], [GHC.Types.Int]))
                        : ipv ipv1
                        -> GHC.Base.Just
                             @ (GHC.Types.Int, ([GHC.Types.Int], [GHC.Types.Int]))
                             (case Burn.$wavg
                                     (GHC.Types.:
                                        @ GHC.Types.Int
                                        ipv
                                        (GHC.List.$wunsafeTake
                                           @ GHC.Types.Int
                                           3#
                                           ww)) of ww2 { DEFAULT ->
                              GHC.Types.I# ww2 },
                              (GHC.List.tail @ GHC.Types.Int ww, wild1)) } }) -}
300fceb589c29b20fd40cd40cc6aabbf
  $winitRndImg ::
    GHC.Types.Int
    -> GHC.Prim.Int# -> GHC.Types.Int -> [[GHC.Types.Int]]
  {- Arity: 3, Strictness: <L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (ww :: GHC.Prim.Int#)
                   (w6 :: GHC.Types.Int) ->
                 Burn.$wl'
                   (GHC.Prim.-# ww 3#)
                   (case Burn.$wj
                           (case w of wild1 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.<# 0# y) of wild {
                              GHC.Types.False -> GHC.Types.[] @ GHC.Types.Int
                              GHC.Types.True
                              -> Burn.$wgo2
                                   (System.Random.mkStdGen w6)
                                   y } }) of ww1 { (#,#) ww2 ww3 ->
                    GHC.Types.: @ [GHC.Types.Int] ww2 ww3 })) -}
9ecd6cf5bc4462ae00b2ff17222dd6b1
  $winitRndImg' ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [[GHC.Types.Int]] #)
  {- Arity: 4, Strictness: <L,1*U(U)><S,U><L,1*U(U)><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (ww :: GHC.Prim.Int#)
                   (w6 :: GHC.Types.Int)
                   (w7 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Burn.$wl''
                   (GHC.Prim.-# ww 3#)
                   (case Burn.$wj
                           (case w of wild1 { GHC.Types.I# y ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.<# 0# y) of wild {
                              GHC.Types.False -> GHC.Types.[] @ GHC.Types.Int
                              GHC.Types.True
                              -> Burn.$wgo3
                                   (System.Random.mkStdGen w6)
                                   y } }) of ww1 { (#,#) ww2 ww3 ->
                    GHC.Types.: @ [GHC.Types.Int] ww2 ww3 })
                   w7) -}
f7892733ef1b679ccea58780426ad4fc
  $wj :: [GHC.Types.Int] -> (# [GHC.Types.Int], [[GHC.Types.Int]] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Int]) ->
                 (# case Burn.$wh
                           (case Burn.$wf w of ww { (#,#) ww1 ww2 -> ww1 },
                            case Burn.$wf w of ww { (#,#) ww1 ww2 ->
                            GHC.List.head @ [GHC.Types.Int] ww2 }) of ww { (#,#) ww1 ww2 ->
                    GHC.Types.: @ GHC.Types.Int ww1 ww2 },
                    Burn.f w #)) -}
60efb5ceaa4dbdccc1b753d4328387a4
  $wk :: [[GHC.Types.Int]] -> (# GHC.Types.Int, [GHC.Types.Int] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: [[GHC.Types.Int]]) ->
                 Burn.$wh
                   (GHC.List.head @ [GHC.Types.Int] w,
                    case w of wild {
                      [] -> case GHC.List.scanl2 ret_ty [GHC.Types.Int] of {}
                      : ds1 xs -> GHC.List.head @ [GHC.Types.Int] xs })) -}
3ac31c48311cd759b2d529ccf9e969fe
  $wl' :: GHC.Prim.Int# -> [[GHC.Types.Int]] -> [[GHC.Types.Int]]
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
082a725a455c667bdbfd7ce2183527aa
  $wl'' ::
    GHC.Prim.Int#
    -> [[GHC.Types.Int]]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [[GHC.Types.Int]] #)
  {- Arity: 3, Strictness: <S,1*U><L,U><S,U>, Inline: [0] -}
a5be705da8b63a8bfd3ef91217248e1a
  type Blue = Burn.Color
b7732780bb6823fbbc71f1237ea8cdba
  type Color = GHC.Types.Int
d053fe6af6a52ba23346bafdb5d0e304
  type Green = Burn.Color
bfd9156b1693e6ac2597a404fdaec46c
  type Img = [[Burn.Pixel]]
9997238d8f1afe31dcfcffb29d28876b
  type Pixel = (Burn.Red, Burn.Green, Burn.Blue)
a2dcc8672c7a4f045153ce8f51c73267
  type Red = Burn.Color
b137abc007b6424e99242eada828f201
  avg :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Types.Int]) ->
                 case Burn.$wavg w of ww { DEFAULT -> GHC.Types.I# ww }) -}
9a1fef690867359f985662a64b218819
  exportImg ::
    GHC.IO.FilePath -> [[GHC.Types.Int]] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Burn.exportImg1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <[[GHC.Types.Int]]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9b9ab5393ea91d628727c6a1536a41a6
  exportImg' ::
    GHC.IO.FilePath
    -> GHC.Types.IO [[GHC.Types.Int]] -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,1*U><C(S(SL)),1*C1(U(U,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Burn.exportImg'1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <GHC.Types.IO [[GHC.Types.Int]]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
5760903be7e666018136d0d5dc796a23
  exportImg'1 ::
    GHC.IO.FilePath
    -> GHC.Types.IO [[GHC.Types.Int]]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,1*U><C(S(SL)),1*C1(U(U,U))><S,U>,
     Unfolding: (\ (path :: GHC.IO.FilePath)
                   (xs :: GHC.Types.IO [[GHC.Types.Int]])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case xs `cast` (GHC.Types.N:IO[0] <[[GHC.Types.Int]]>_R)
                        eta of ds1 { (#,#) ipv ipv1 ->
                 System.IO.writeFile1
                   (GHC.Base.++ @ GHC.Types.Char path Burn.exportImg2)
                   (Burn.toPGM ipv1)
                   ipv }) -}
fc5557e49a66707c2aea921c3521f971
  exportImg1 ::
    GHC.IO.FilePath
    -> [[GHC.Types.Int]]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: (\ (path :: GHC.IO.FilePath)
                   (xs :: [[GHC.Types.Int]]) ->
                 System.IO.writeFile1
                   (GHC.Base.++ @ GHC.Types.Char path Burn.exportImg2)
                   (Burn.toPGM xs)) -}
efb0abcb3bd455df848973d0fcd77845
  exportImg2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ".pgm"#) -}
2da8feb43de209bb0e747a3089ad2c49
  f :: [GHC.Types.Int] -> [[GHC.Types.Int]]
  {- Arity: 1, Strictness: <L,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Types.Int]) ->
                 case Burn.$wf w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ [GHC.Types.Int] ww1 ww2 }) -}
8fd507d2457ac7695a8b45c4f46e9572
  f_go :: [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
2f62496ded6ea5b79248e09d8f37cf3f
  g ::
    [GHC.Types.Int] -> GHC.Base.Maybe (GHC.Types.Int, [GHC.Types.Int])
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Types.Int]) ->
                 case ds of wild {
                   [] -> GHC.Base.Nothing @ (GHC.Types.Int, [GHC.Types.Int])
                   : ipv ipv1
                   -> GHC.Base.Just
                        @ (GHC.Types.Int, [GHC.Types.Int])
                        (case Burn.$wavg
                                (GHC.List.$wunsafeTake @ GHC.Types.Int 3# wild) of ww { DEFAULT ->
                         GHC.Types.I# ww },
                         ipv1) }) -}
b13b57156e88c88342b09809be391a74
  h :: ([GHC.Types.Int], [GHC.Types.Int]) -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <L,U(U,U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: ([GHC.Types.Int], [GHC.Types.Int])) ->
                 case Burn.$wh w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Int ww1 ww2 }) -}
91181772c11d423c1d7b3242ef3e7d05
  h_go :: [GHC.Types.Int] -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)> -}
134fabee0465a0591fca9c30c046500c
  h_go1 :: [GHC.Types.Int] -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)> -}
d888cbe01d461002952b24e8404450e0
  i ::
    ([GHC.Types.Int], [GHC.Types.Int])
    -> GHC.Base.Maybe
         (GHC.Types.Int, ([GHC.Types.Int], [GHC.Types.Int]))
  {- Arity: 1, Strictness: <S(LS),1*U(U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: ([GHC.Types.Int], [GHC.Types.Int])) ->
                 case w of ww { (,) ww1 ww2 -> Burn.$wi ww1 ww2 }) -}
ae8b805ab8858b84cd4f8fd17d10b808
  i1 ::
    GHC.Base.Maybe (GHC.Types.Int, ([GHC.Types.Int], [GHC.Types.Int]))
  {- Strictness: x -}
16e1e4196cfc7f5456bd9950447180f0
  initImg :: GHC.Types.Int -> [GHC.Types.Int] -> [[GHC.Types.Int]]
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U>,
     Unfolding: InlineRule (0, True, True) Burn.l -}
f34bc810d4ff8fe80678b8644792c37c
  initImg' ::
    GHC.Types.Int -> [GHC.Types.Int] -> GHC.Types.IO [[GHC.Types.Int]]
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Burn.initImg'1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <[GHC.Types.Int]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[[GHC.Types.Int]]>_R)) -}
542d430b056a9f1b175f0c3439e91491
  initImg'1 ::
    GHC.Types.Int
    -> [GHC.Types.Int]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [[GHC.Types.Int]] #)
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (c :: GHC.Types.Int)
                   (xs :: [GHC.Types.Int])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case c of wild { GHC.Types.I# x ->
                 Burn.initImg'2
                   (GHC.Types.I# (GHC.Prim.-# x 3#))
                   (Burn.j xs)
                   eta }) -}
28669471749bc19fbcb0a6e0736bcb7b
  initImg'2 ::
    GHC.Types.Int
    -> [[GHC.Types.Int]]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [[GHC.Types.Int]] #)
  {- Arity: 3, Strictness: <S(S),1*U(1*U)><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w6 :: [[GHC.Types.Int]])
                   (w7 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { GHC.Types.I# ww1 -> Burn.$wl'' ww1 w6 w7 }) -}
495acdbcb520026bcfaa7dfb0754a11b
  initRndImg ::
    GHC.Types.Int
    -> GHC.Types.Int -> GHC.Types.Int -> [[GHC.Types.Int]]
  {- Arity: 3, Strictness: <L,1*U(U)><S(S),1*U(U)><L,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w6 :: GHC.Types.Int)
                   (w7 :: GHC.Types.Int) ->
                 case w6 of ww { GHC.Types.I# ww1 ->
                 Burn.$winitRndImg w ww1 w7 }) -}
6abee36806945f253d044b906f175800
  initRndImg' ::
    GHC.Types.Int
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.IO [[GHC.Types.Int]]
  {- Arity: 4, Strictness: <L,1*U(U)><S(S),1*U(U)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Burn.initRndImg'1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[[GHC.Types.Int]]>_R)) -}
88bb8baf483b8571226367866d2f5695
  initRndImg'1 ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [[GHC.Types.Int]] #)
  {- Arity: 4, Strictness: <L,1*U(U)><S(S),1*U(U)><L,1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Types.Int)
                   (w6 :: GHC.Types.Int)
                   (w7 :: GHC.Types.Int)
                   (w8 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w6 of ww { GHC.Types.I# ww1 ->
                 Burn.$winitRndImg' w ww1 w7 w8 }) -}
841c7a31284fd52faaaf8c42bf31922c
  j :: [GHC.Types.Int] -> [[GHC.Types.Int]]
  {- Arity: 1, Strictness: <L,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Types.Int]) ->
                 case Burn.$wj w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ [GHC.Types.Int] ww1 ww2 }) -}
6f3512e73f5e18d53e1dbd265c73a256
  k :: [[GHC.Types.Int]] -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <L,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [[GHC.Types.Int]]) ->
                 case Burn.$wk w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Int ww1 ww2 }) -}
c93c644cf921852034bd10f172f45239
  k' :: [[GHC.Types.Int]] -> GHC.Types.IO [GHC.Types.Int]
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Burn.k'1
                  `cast`
                (<[[GHC.Types.Int]]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.Types.Int]>_R)) -}
52d4756baf19dc95b2e32e66fea60369
  k'1 ::
    [[GHC.Types.Int]]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (xs :: [[GHC.Types.Int]])
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, GHC.Types.Int)
                        @ GHC.Types.Int
                        r#
                        Burn.k'2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { GHC.Types.I# ipv2 ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, GHC.Types.Int)
                        @ GHC.Types.Int
                        r#
                        Burn.k'2
                        ipv of ds2 { (#,#) ipv3 ipv4 ->
                 case ipv4 of b2 { GHC.Types.I# ipv5 ->
                 (# ipv3,
                    case Burn.$wh
                           (Burn.mkNoise
                              (case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.>=# ipv2 0#) of wild1 {
                                 GHC.Types.False -> GHC.Types.I# (GHC.Prim.negateInt# ipv2)
                                 GHC.Types.True -> b1 })
                              (GHC.List.head @ [GHC.Types.Int] xs),
                            case xs of wild1 {
                              [] -> case GHC.List.scanl2 ret_ty [GHC.Types.Int] of {}
                              : ds3 xs1
                              -> Burn.mkNoise
                                   (case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.>=# ipv5 0#) of wild2 {
                                      GHC.Types.False -> GHC.Types.I# (GHC.Prim.negateInt# ipv5)
                                      GHC.Types.True -> b2 })
                                   (GHC.List.head @ [GHC.Types.Int] xs1) }) of ww { (#,#) ww1 ww2 ->
                    GHC.Types.: @ GHC.Types.Int ww1 ww2 } #) } } } } }) -}
fadec06ecb5a694fcc082ea43277520c
  k'2 ::
    System.Random.StdGen -> (System.Random.StdGen, GHC.Types.Int)
  {- Arity: 1,
     Unfolding: (\ (a1 :: System.Random.StdGen) ->
                 case System.Random.$wrandomIvalInteger
                        @ System.Random.StdGen
                        @ GHC.Types.Int
                        System.Random.$fRandomGenStdGen
                        GHC.Num.$fNumInt
                        System.Random.$fRandomCIntMax4
                        System.Random.$fRandomCIntMax3
                        a1 of ww { (#,#) ww1 ww2 ->
                 case ww2 of a'1 { System.Random.StdGen ipv ipv1 ->
                 (a'1, ww1) } }) -}
f0662b043a29ad0c58b84bf42e65d494
  l :: GHC.Types.Int -> [GHC.Types.Int] -> [[GHC.Types.Int]]
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (c :: GHC.Types.Int) (xs :: [GHC.Types.Int]) ->
                 case c of wild { GHC.Types.I# x ->
                 Burn.l' (GHC.Types.I# (GHC.Prim.-# x 3#)) (Burn.j xs) }) -}
802537395361356d48323b911f060ed7
  l' :: GHC.Types.Int -> [[GHC.Types.Int]] -> [[GHC.Types.Int]]
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w6 :: [[GHC.Types.Int]]) ->
                 case w of ww { GHC.Types.I# ww1 -> Burn.$wl' ww1 w6 }) -}
b113739d98908a8e4e74d7879821b740
  l'' ::
    GHC.Types.Int
    -> [[GHC.Types.Int]] -> GHC.Types.IO [[GHC.Types.Int]]
  {- Arity: 3, Strictness: <S(S),1*U(1*U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Burn.initImg'2
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <[[GHC.Types.Int]]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[[GHC.Types.Int]]>_R)) -}
8f3628649eb7f6447da1fee4c6f1202a
  m ::
    GHC.Types.Int -> [GHC.Types.Int] -> GHC.Types.IO [[GHC.Types.Int]]
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Burn.initImg'1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <[GHC.Types.Int]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[[GHC.Types.Int]]>_R)) -}
4656262ebae3cc5f5788c9b593718366
  mkNoise :: GHC.Types.Int -> [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: (\ (rnd3 :: GHC.Types.Int) (xs :: [GHC.Types.Int]) ->
                 GHC.List.zipWith
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   GHC.Num.$fNumInt_$c+
                   xs
                   (case GHC.List.$wlenAcc @ GHC.Types.Int xs 0# of ww2 { DEFAULT ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# 0# ww2) of wild {
                      GHC.Types.False -> GHC.Types.[] @ GHC.Types.Int
                      GHC.Types.True
                      -> Burn.$wgo4
                           (case rnd3 of wild1 { GHC.Types.I# x# ->
                            case GHC.Int.$w$cdivMod1
                                   (GHC.Prim.word2Int#
                                      (GHC.Prim.and#
                                         (GHC.Prim.int2Word# (GHC.Prim.narrow32Int# x#))
                                         2147483647##))
                                   2147483562# of ww4 { (#,#) ww5 ww6 ->
                            case ww6 of wild2 { GHC.Int.I32# x#1 ->
                            case ww5 of ww1 { GHC.Int.I32# ww3 ->
                            case GHC.Classes.modInt# ww3 2147483398# of wild3 { DEFAULT ->
                            System.Random.StdGen
                              (GHC.Prim.narrow32Int# (GHC.Prim.+# x#1 1#))
                              (GHC.Prim.narrow32Int#
                                 (GHC.Prim.+# (GHC.Prim.narrow32Int# wild3) 1#)) } } } } })
                           ww2 } })) -}
89aa55749e234853befb57fdc1ed3ad7
  mkRndNoise :: [GHC.Types.Int] -> GHC.Types.IO [GHC.Types.Int]
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Burn.mkRndNoise1
                  `cast`
                (<[GHC.Types.Int]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.Types.Int]>_R)) -}
18f671b2200dc889cad5fb658486b732
  mkRndNoise1 ::
    [GHC.Types.Int]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (xs :: [GHC.Types.Int])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, GHC.Types.Int)
                        @ GHC.Types.Int
                        r#
                        Burn.k'2
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { GHC.Types.I# ipv2 ->
                 (# ipv,
                    Burn.mkNoise
                      (case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.>=# ipv2 0#) of wild1 {
                         GHC.Types.False -> GHC.Types.I# (GHC.Prim.negateInt# ipv2)
                         GHC.Types.True -> b1 })
                      xs #) } } }) -}
8bc38f74ecd3c13586b183c0c538902c
  rnd :: GHC.Types.IO GHC.Types.Int
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Burn.rnd1 `cast` (Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R)) -}
6be1f87a996d94b6ddf29fed9bf1f88c
  rnd1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Burn.rnd2 s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Num.$fNumInt_$cabs ipv1 #) }) -}
9a3df1260afdffb4e91599764a25a46c
  rnd2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
  {- Arity: 1, Strictness: <S,U>m,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, GHC.Types.Int)
                        @ GHC.Types.Int
                        r#
                        Burn.k'2
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { GHC.Types.I# ipv2 -> ds1 } } }) -}
c54dc1910c335f559e5ea284f3159421
  toPGM :: [[GHC.Types.Int]] -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (xs :: [[GHC.Types.Int]]) ->
                 Data.OldList.unlines
                   (GHC.Types.:
                      @ [GHC.Types.Char]
                      Burn.toPGM3
                      (GHC.Types.:
                         @ [GHC.Types.Char]
                         (case xs of wild {
                            [] -> case GHC.List.badHead ret_ty [GHC.Types.Char] of {}
                            : x ds1
                            -> case GHC.List.$wlenAcc @ GHC.Types.Int x 0# of ww2 { DEFAULT ->
                               case GHC.Show.$wshowSignedInt
                                      0#
                                      ww2
                                      (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                               GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                 (GHC.CString.unpackAppendCString#
                                    " "#
                                    (case GHC.List.$wlenAcc
                                            @ [GHC.Types.Int]
                                            wild
                                            0# of ww1 { DEFAULT ->
                                     case GHC.Show.$wshowSignedInt
                                            0#
                                            ww1
                                            (GHC.Types.[]
                                               @ GHC.Types.Char) of ww3 { (#,#) ww7 ww8 ->
                                     GHC.Types.: @ GHC.Types.Char ww7 ww8 } })) } } })
                         (GHC.Types.:
                            @ [GHC.Types.Char]
                            Burn.toPGM2
                            (GHC.Base.map
                               @ [GHC.Types.Int]
                               @ [GHC.Types.Char]
                               Burn.toPGM1
                               xs))))) -}
8f85ea0c09bd1687e9848ebc601494ed
  toPGM1 :: [GHC.Types.Int] -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [GHC.Types.Int]) ->
                 case Burn.toPGM_go x of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char : ds1 xs -> xs }) -}
fc0cafec6ace97c4add39d27db1e72be
  toPGM2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "255"#) -}
583bd2719f481083c19cbf574a54e557
  toPGM3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "P2"#) -}
874dd246004a8d00b1e335c06ff1c7a4
  toPGM_go :: [GHC.Types.Int] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

